#%RAML 0.8

title: NeteaseMusic API
mediaType: application/json

/users:
  get:
    description: as admin, I can get all the users then I can manage them.
    responses:
      200:
        body:
          application/json:
            schema: |
              {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "uri": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": ["uri", "id", "username", "email"]
                }
              }
            example: |
              [
                {
                  "id": "1",
                  "uri": "/users/1",
                  "username": "userA",
                  "email": "xxx@xxx.com"
                }
              ]
      403:
  post:
    description: as a user, I can sign up to use system
    body:
      application/json:
        schema: |
          {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
              },
            "password":{
                "type": "string"
              },
            "required": ["email", "password"]
            }
          }
    responses:
      201:
        headers:
          Location:
            description: "sign up"
            type: string
      400:
        body:
          application/json:
            schema: |
              {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "type": "object",
              "properties": {
                "field": {
                  "type": "array",
                    "items":{
                      "type": "string"
                    }
                  },
                "message":{
                    "type": "string"
                  },
                "required": ["field", "message"]
                }
              }
            example: |
              {
                "field": ["email", "password"],
                "message": "required"
              }
  /{userId}:
    get:
      description: as admin or user himself, I can get user information
      responses:
        200:
          body:
            application/json:
              schema: |
                {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "uri": {
                      "type": "string"
                    },
                    "email":{
                      "type": "string"
                    },
                    "membership": {
                      "type" : "boolbean"
                      },
                    "required": ["id", "uri", "email", "membership"]
                  }
                }
        404:
          description: user not existed, or try to get other user's information
        400:
          body:
            application/json:
              schema: |
                {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                  "field": {
                    "type": "array",
                      "items":{
                        "type": "string"
                      }
                    },
                  "message":{
                      "type": "string"
                    },
                  "required": ["field", "message"]
                  }
                }
              example: |
                {
                  "field": ["email", "password"],
                  "message": "required"
                }
    /session:
      post:
        description: as a user, I can log in
        body:
          application/json:
            schema: |
              {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                  },
                "password":{
                    "type": "string"
                  },
                "required": ["email", "password"]
                }
              }
        responses:
          201:
            headers:
              Location:
                description: "log in"
                type: string
          400:
            body:
              application/json:
                schema: |
                  {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                      "name": {
                        "message": "string"
                        },
                        "required": ["message"]
                      }
                  }
                example: |
                  {
                    "message": "password not match"
                  }
      delete:
        description: as a login user, I can log out
        responses:
          200:
          403:
    /listeningCertificats:
      post:
        responses:
          201:
          400:
            description: invalid parameter or listeningCertificate based on the payment already existed
      get:
      /{listeningCertificateId}:
        get:
    /downloadCertificats:
      post:
      get:
      /{downloadCertificateId}:
        get:
    /musicItems:
      post:
      get:
      /{musicId}:
        get:
        post:
        /listenabilities:
          post:
          get:
          /{listenabilityId}:
        /downloadabilities:
          post:
          get:
          /{downloadabilitiyId}:
        /prices:
          post:
          get:
          /{priceId}:
    /products:
      post:
      get:
      /{productId}:
        post:
        get:
    /payments:
      post:
      get:
      /{paymentId}:
        get:
    /downloadRecords:
      post:
        responses:
          201:
          400:
            description: invalid parameter or don not have access
      get:
      /{downloadId}:
        get:
